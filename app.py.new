from flask import Flask, jsonify, request
from flask_cors import CORS
import pandas as pd
import argparse

# Parse command line arguments
parser = argparse.ArgumentParser(description='Run the Flask server for RNA-seq data viewer')
parser.add_argument('--port', type=int, default=8000, help='Port to run the server on (default: 8000)')
args = parser.parse_args()

app = Flask(__name__)
# Enable CORS for all routes and origins
CORS(app, resources={r"/*": {"origins": "*"}})

# Load the TSV files
def load_data():
    data_dict = {}

    # Try to load each file individually with error handling
    try:
        mrsd_splice = pd.read_csv('data/mrsd_splice.tsv.gz', sep='\t')
        data_dict['mrsd_splice'] = mrsd_splice
        print("Successfully loaded mrsd_splice.tsv.gz")
    except Exception as e:
        print(f"Error loading mrsd_splice.tsv.gz: {e}")
        # Create a sample dataset for development if file doesn't exist
        data_dict['mrsd_splice'] = pd.DataFrame({
            'gene_id': ['ENSG1', 'ENSG2', 'ENSG3'],
            'expression': [10.5, 20.3, 15.7],
            'sample': ['sample1', 'sample2', 'sample3']
        })
        print("Created sample mrsd_splice dataset")

    try:
        splice_vault = pd.read_csv('data/splice_vault.tsv.gz', sep='\t')
        data_dict['splice_vault'] = splice_vault
        print("Successfully loaded splice_vault.tsv.gz")
    except Exception as e:
        print(f"Error loading splice_vault.tsv.gz: {e}")
        # Create a sample dataset for development
        data_dict['splice_vault'] = pd.DataFrame({
            'transcript_id': ['ENST1', 'ENST2', 'ENST3'],
            'junction': ['chr1:1000-2000', 'chr1:3000-4000', 'chr2:1000-2000'],
            'count': [100, 200, 150]
        })
        print("Created sample splice_vault dataset")

    try:
        mrsd_expression = pd.read_csv('data/mrsd_expression.tsv.gz', sep='\t')
        data_dict['mrsd_expression'] = mrsd_expression
        print("Successfully loaded mrsd_expression.tsv.gz")
    except Exception as e:
        print(f"Error loading mrsd_expression.tsv.gz: {e}")
        # Create a sample dataset for development
        data_dict['mrsd_expression'] = pd.DataFrame({
            'gene_id': ['ENSG1', 'ENSG2', 'ENSG3'],
            'tpm': [5.2, 10.1, 7.8],
            'sample': ['sample1', 'sample2', 'sample3']
        })
        print("Created sample mrsd_expression dataset")

    return data_dict

# Store the DataFrames
dfs = load_data()

@app.route('/api/datasets', methods=['GET'])
def get_datasets():
    return jsonify(list(dfs.keys()))

@app.route('/api/columns/<dataset>', methods=['GET'])
def get_columns(dataset):
    if dataset in dfs:
        return jsonify(list(dfs[dataset].columns))
    return jsonify({'error': 'Dataset not found'}), 404

@app.route('/api/data/<dataset>', methods=['GET'])
def get_data(dataset):
    if dataset not in dfs:
        return jsonify({'error': 'Dataset not found'}), 404

    # Get query parameters
    search = request.args.get('search', '')
    column = request.args.get('column', '')
    page = int(request.args.get('page', 1))
    per_page = int(request.args.get('per_page', 10))

    df = dfs[dataset]

    # Apply search filter if provided
    if search and column in df.columns:
        df = df[df[column].astype(str).str.contains(search, case=False)]

    # Calculate pagination
    total = len(df)
    start_idx = (page - 1) * per_page
    end_idx = start_idx + per_page

    # Convert the slice of data to dictionary
    data = df.iloc[start_idx:end_idx].to_dict('records')

    return jsonify({
        'data': data,
        'total': total,
        'page': page,
        'per_page': per_page
    })

if __name__ == '__main__':
    port = args.port
    print(f"\nStarting Flask server on http://localhost:{port}")
    print("Available datasets:", list(dfs.keys()))
    print("\nPress Ctrl+C to stop the server\n")

    try:
        # Make sure the server is accessible from other machines on the network
        app.run(debug=True, host='0.0.0.0', port=port)
    except KeyboardInterrupt:
        print("\nServer stopped by user")
    except OSError as e:
        if "Address already in use" in str(e):
            print(f"\nError: Port {port} is already in use.")
            print(f"Try running the server with a different port:")
            print(f"    python app.py --port=8080")
        else:
            print(f"\nError starting server: {e}")
